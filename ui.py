# Form implementation generated from reading ui file 'mainwindow.ui'
#
# Created by: PyQt6 UI code generator 6.6.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.


from PySide6 import QtCore, QtGui, QtWidgets
from PySide6.QtGui import QIntValidator
from pipython import GCSDevice, pitools, PILogger, WARNING, INFO

from PyQt6.QtWidgets import QApplication, QMainWindow, QTabWidget, QSplitter, QGridLayout
from collections import OrderedDict

PILogger.setLevel(INFO)

STEP_SIZE = 1


class Ui_MainWindow(QMainWindow):
    def __init__(self):
        super().__init__()
        self.connectButtonState = False
        self.controller = None
        self.pidevice = None
        self.stepsize = STEP_SIZE
        self.zaxisPosition = None
        self.speedValue = None
        self.devices=[]

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(478, 272)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(MainWindow.sizePolicy().hasHeightForWidth())
        MainWindow.setSizePolicy(sizePolicy)
        MainWindow.setMouseTracking(False)
        MainWindow.setAutoFillBackground(False)
        MainWindow.setTabShape(QtWidgets.QTabWidget.TabShape.Rounded)
        MainWindow.setDockNestingEnabled(False)
        MainWindow.setUnifiedTitleAndToolBarOnMac(False)

        self.centralwidget = QtWidgets.QWidget(parent=MainWindow)
        self.centralwidget.setEnabled(True)

        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(5)
        sizePolicy.setVerticalStretch(5)
        sizePolicy.setHeightForWidth(self.centralwidget.sizePolicy().hasHeightForWidth())

        self.centralwidget.setSizePolicy(sizePolicy)
        self.centralwidget.setAutoFillBackground(False)
        self.centralwidget.setObjectName("centralwidget")

        self.verticalLayout = QtWidgets.QVBoxLayout(self.centralwidget)
        self.verticalLayout.setObjectName("verticalLayout")

        self.splitter_6 = QtWidgets.QSplitter(parent=self.centralwidget)
        self.splitter_6.setOrientation(QtCore.Qt.Orientation.Horizontal)
        self.splitter_6.setObjectName("splitter_6")
        self.connectButton = QtWidgets.QPushButton(parent=self.splitter_6)
        self.connectButton.setObjectName("connectButton")
        self.verticalLayout.addWidget(self.splitter_6)

        self.gridLayout_2 = QtWidgets.QGridLayout()
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.label = QtWidgets.QLabel(parent=self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label.sizePolicy().hasHeightForWidth())
        self.label.setSizePolicy(sizePolicy)
        self.label.setObjectName("label")
        self.gridLayout_2.addWidget(self.label, 0, 0, 1, 1)
        self.zaxis = QtWidgets.QLineEdit(parent=self.centralwidget)
        self.zaxis.setEnabled(True)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Expanding,
                                           QtWidgets.QSizePolicy.Policy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.zaxis.sizePolicy().hasHeightForWidth())
        self.zaxis.setSizePolicy(sizePolicy)
        self.zaxis.setObjectName("zaxis")
        self.zaxis.textChanged.connect(self._zaxis_changed)

        self.gridLayout_2.addWidget(self.zaxis, 0, 1, 1, 1)
        self.comboBox = QtWidgets.QComboBox(parent=self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.comboBox.sizePolicy().hasHeightForWidth())
        self.comboBox.setSizePolicy(sizePolicy)
        self.comboBox.setObjectName("comboBox")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.gridLayout_2.addWidget(self.comboBox, 0, 2, 1, 1)
        self.verticalLayout.addLayout(self.gridLayout_2)
        self.gridLayout = QtWidgets.QGridLayout()
        self.gridLayout.setObjectName("gridLayout")
        self.label_2 = QtWidgets.QLabel(parent=self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_2.sizePolicy().hasHeightForWidth())
        self.label_2.setSizePolicy(sizePolicy)
        self.label_2.setObjectName("label_2")
        self.gridLayout.addWidget(self.label_2, 0, 0, 1, 1)
        self.speed = QtWidgets.QLineEdit(parent=self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Expanding,
                                           QtWidgets.QSizePolicy.Policy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.speed.sizePolicy().hasHeightForWidth())
        self.speed.setSizePolicy(sizePolicy)
        self.speed.setObjectName("speed")
        self.speed.textChanged.connect(self._speed_changed)
        self.gridLayout.addWidget(self.speed, 0, 1, 1, 1)
        self.comboBox_2 = QtWidgets.QComboBox(parent=self.centralwidget)
        self.comboBox_2.setEnabled(True)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.comboBox_2.sizePolicy().hasHeightForWidth())
        self.comboBox_2.setSizePolicy(sizePolicy)
        self.comboBox_2.setAutoFillBackground(False)
        self.comboBox_2.setEditable(False)
        self.comboBox_2.setObjectName("comboBox_2")
        self.comboBox_2.addItem("")
        self.comboBox_2.addItem("")
        self.gridLayout.addWidget(self.comboBox_2, 0, 2, 1, 1)
        self.verticalLayout.addLayout(self.gridLayout)
        self.splitter = QtWidgets.QSplitter(parent=self.centralwidget)
        self.splitter.setOrientation(QtCore.Qt.Orientation.Horizontal)
        self.splitter.setObjectName("splitter")
        self.pushButton = QtWidgets.QPushButton(parent=self.splitter)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pushButton.sizePolicy().hasHeightForWidth())
        self.pushButton.setSizePolicy(sizePolicy)
        self.pushButton.setObjectName("pushButton")
        self.pushButton_2 = QtWidgets.QPushButton(parent=self.splitter)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pushButton_2.sizePolicy().hasHeightForWidth())
        self.pushButton_2.setSizePolicy(sizePolicy)
        self.pushButton_2.setObjectName("pushButton_2")
        self.verticalLayout.addWidget(self.splitter)
        self.splitter_5 = QtWidgets.QSplitter(parent=self.centralwidget)
        self.splitter_5.setOrientation(QtCore.Qt.Orientation.Horizontal)
        self.splitter_5.setObjectName("splitter_5")
        self.move = QtWidgets.QPushButton(parent=self.splitter_5)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.move.sizePolicy().hasHeightForWidth())
        self.move.setSizePolicy(sizePolicy)
        self.move.setObjectName("move")
        self.pushButton_4 = QtWidgets.QPushButton(parent=self.splitter_5)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pushButton_4.sizePolicy().hasHeightForWidth())
        self.pushButton_4.setSizePolicy(sizePolicy)
        self.pushButton_4.setObjectName("pushButton_4")
        self.pushButton_5 = QtWidgets.QPushButton(parent=self.splitter_5)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pushButton_5.sizePolicy().hasHeightForWidth())
        self.pushButton_5.setSizePolicy(sizePolicy)
        self.pushButton_5.setObjectName("pushButton_5")
        self.verticalLayout.addWidget(self.splitter_5)
        self.splitter_3 = QtWidgets.QSplitter(parent=self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.splitter_3.sizePolicy().hasHeightForWidth())
        self.splitter_3.setSizePolicy(sizePolicy)
        self.splitter_3.setOrientation(QtCore.Qt.Orientation.Horizontal)
        self.splitter_3.setObjectName("splitter_3")
        self.pushButton_7 = QtWidgets.QPushButton(parent=self.splitter_3)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pushButton_7.sizePolicy().hasHeightForWidth())
        self.pushButton_7.setSizePolicy(sizePolicy)
        self.pushButton_7.setObjectName("pushButton_7")
        self.pushButton_8 = QtWidgets.QPushButton(parent=self.splitter_3)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pushButton_8.sizePolicy().hasHeightForWidth())
        self.pushButton_8.setSizePolicy(sizePolicy)
        self.pushButton_8.setObjectName("pushButton_8")
        self.pushButton_6 = QtWidgets.QPushButton(parent=self.splitter_3)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pushButton_6.sizePolicy().hasHeightForWidth())
        self.pushButton_6.setSizePolicy(sizePolicy)
        self.pushButton_6.setObjectName("pushButton_6")
        self.verticalLayout.addWidget(self.splitter_3)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menuBar = QtWidgets.QMenuBar(parent=MainWindow)
        self.menuBar.setGeometry(QtCore.QRect(0, 0, 478, 22))
        self.menuBar.setObjectName("menuBar")
        self.menuMenu = QtWidgets.QMenu(parent=self.menuBar)
        self.menuMenu.setObjectName("menuMenu")
        MainWindow.setMenuBar(self.menuBar)
        self.statusBar = QtWidgets.QStatusBar(parent=MainWindow)
        self.statusBar.setObjectName("statusBar")
        MainWindow.setStatusBar(self.statusBar)
        self.actionExit = QtGui.QAction(parent=MainWindow)
        self.actionExit.setObjectName("actionExit")
        self.actionProperties = QtGui.QAction(parent=MainWindow)
        self.actionProperties.setObjectName("actionProperties")
        self.menuMenu.addAction(self.actionProperties)
        self.menuMenu.addAction(self.actionExit)
        self.menuBar.addAction(self.menuMenu.menuAction())

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Calibration  Unit"))

        # Connect Button
        self.connectButton.setText(_translate("MainWindow", "Connect"))
        self.connectButton.clicked.connect(self._connect)
        self.connectButton.setCheckable(True)

        self.label.setText(_translate("MainWindow", "Z-Axis"))
        self.zaxis.setText(_translate("MainWindow","Enter z-axis value between 0 and 300"))


        self.comboBox.setItemText(0, _translate("MainWindow", "mm"))
        self.comboBox.setItemText(1, _translate("MainWindow", "cm"))

        self.speed.setText(_translate("MainWindow", "Enter a speed value between 0 and 6"))
        # self.speed.textChanged.connect(self._speed_changed)

        self.label_2.setText(_translate("MainWindow", "Speed"))


        self.comboBox_2.setItemText(0, _translate("MainWindow", "mm/sec"))
        self.comboBox_2.setItemText(1, _translate("MainWindow", "cm/sec"))

        self.pushButton.setText(_translate("MainWindow", "Up"))
        self.pushButton_2.setText(_translate("MainWindow", "Down"))
        self.move.setText(_translate("MainWindow", "Move"))
        self.move.clicked.connect(self._move)
        self.pushButton_4.setText(_translate("MainWindow", "Pause"))
        self.pushButton_5.setText(_translate("MainWindow", "Stop"))
        self.pushButton_7.setText(_translate("MainWindow", "Save Position"))
        self.pushButton_8.setText(_translate("MainWindow", "Go to Previous Position"))
        self.pushButton_6.setText(_translate("MainWindow", "Go to Origin"))

        self.menuMenu.setTitle(_translate("MainWindow", "Menu"))

        self.actionExit.setText(_translate("MainWindow", "Exit"))

        self.actionProperties.setText(_translate("MainWindow", "Properties"))

    def _connect(self):
        if not self.connectButtonState:
            with GCSDevice('C-663') as pidevice:
                PILogger.info('Searching for controllers...')
                self.devices = pidevice.EnumerateUSB(mask='C-663')
                if len(self.devices) == 0:
                    PILogger.info('Found {} controllers'.format(len(self.devices)))
                else:
                    pidevice.ConnectUSB(self.devices[0])
                    PILogger.info('Connected: {}'.format(pidevice.qIDN().strip()))

                    PILogger.info(pidevice.qIDN())

                    PILogger.info('Initializing device...')
                    pitools.startup(pidevice, stages=['M-414.32S'], refmodes=['FNL'])
                    PILogger.info('done!')
                    self.connectButton.setChecked(self.connectButtonState)
                    self.connectButton.setText('Connected')
                    self.connectButtonState = True
                    self.statusBar.showMessage('Connected!', 2000)
                    self.pidevice = pidevice

        else:
            PILogger.info('Disconnecting...')
            self.pidevice.CloseConnection()
            self.connectButtonState = False
            self.connectButton.setText('Connect')
            PILogger.info('disconnected')
            self.statusBar.showMessage('Disconnected!', 2000)
            self.pidevice = None

    def _move(self):
        if not self.connectButtonState:
            self.statusBar.showMessage('The device is not connected. Please connect first!')
        else:
            try:
                self.statusBar.showMessage('Starting...', 2000)
                with GCSDevice('C-663') as pidevice:
                    pidevice.ConnectUSB(self.devices[0])
                    zaxisValue = int(self.zaxis.text())
                    speedValue = int(self.speed.text())
                    print(pidevice.gcscommands)
                    print(pidevice.gcsdevice)
                    pidevice.VEL('1', speedValue)
                    rangemin = pidevice.qTMN()
                    for key, value in rangemin.items():
                        PILogger.info('{}: {}'.format(key, value))
                    rangemax = pidevice.qTMX()
                    for key, value in rangemax.items():
                        PILogger.info('{}: {}'.format(key, value))

                    pidevice.MOV('1', zaxisValue)
                    pitools.waitontarget(pidevice)
                    PILogger.info('Done!')
            except Exception as e:
                return e




    def _pause(self):
        pass

    def _stop(self):
        pass

    def _move(self):
        if not self.connectButtonState:
            self.statusBar.showMessage('The device is not connected. Please connect first')
        else:

            self.zaxisPosition= int(self.zaxis.text())
            self.speedValue = int(self.speed.text())
            self.pidevice.VEL('1' , self.speedValue)
            self.pidevice.MOV('1', self.zaxisPosition)
            self.statusBar.showMessage('Moving...', 2000)
            PILogger.info('Moved to position: {}'.format(self.zaxisPosition))



    def _readParameters(self):
        pass

    def _rangeMin(self):
        pass

    def _zaxis_changed(self):
        v = QIntValidator(0, 300, self.zaxis)
        self.zaxis.setValidator(v)
        if v.validate(self.zaxis.text(), v.top()):
            return
        else:
            self.statusBar.showMessage('Z-Axis value must be between 0 and 300')

    def _speed_changed(self):
        speedValidator = QIntValidator(0, 6, self.speed)
        self.speed.setValidator(speedValidator)
        if not speedValidator.validate(self.speed.text(), speedValidator.top()):
            self.statusBar.showMessage('Speed value must be between 0 and 6')
        else:
            pass

if __name__ == "__main__":
    import sys

    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec())
