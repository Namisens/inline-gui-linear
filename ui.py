# Form implementation generated from reading ui file 'mainwindow.ui'
#
# Created by: PyQt6 UI code generator 6.6.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.
# import time
import csv
from typing import Union

from PyQt6.QtWidgets import QMainWindow
from pipython import *
# from pipython import pitools
from signalsSlots import *
# from pipython.pidevice.common.gcscommands_helpers import *
from time import time, sleep
import pandas as pd

PILogger.setLevel(INFO)

STEP_SIZE = 1.0
CONTROLLER_NUMBER = 'C-663'

DEFAULT_SPEED = 3.0
DEFAULT_ZAXIS_POSITION = 150
STAGE_NUMBER = 'M-414.32S'


class Ui_MainWindow(QMainWindow):
    def __init__(self):
        super().__init__()

        self.connectButtonState: bool = False
        self.piDevice: Union[GCSDevice, None] = None
        self.stepSize: Union[int, None] = None
        self.zAxisPosition: Union[float, None] = None
        self.speedValue: Union[float, None] = None
        self.stepSizeValue: Union[float, None] = None
        self.minValue: Union[float, None] = None
        self.maxValue: Union[float, None] = None
        self.nSweepValue: Union[int, None] = None
        self.haltTimeValue: Union[float, None] = None

    def setupUi(self, MainWindow):

        # Mainwindow
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(478, 272)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(MainWindow.sizePolicy().hasHeightForWidth())
        MainWindow.setSizePolicy(sizePolicy)
        MainWindow.setMouseTracking(False)
        MainWindow.setAutoFillBackground(False)
        MainWindow.setTabShape(QtWidgets.QTabWidget.TabShape.Rounded)
        MainWindow.setDockNestingEnabled(False)
        MainWindow.setUnifiedTitleAndToolBarOnMac(False)

        self.centralWidget = QtWidgets.QWidget(parent=MainWindow)
        self.centralWidget.setEnabled(True)

        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(5)
        sizePolicy.setVerticalStretch(5)
        sizePolicy.setHeightForWidth(self.centralWidget.sizePolicy().hasHeightForWidth())

        self.centralWidget.setSizePolicy(sizePolicy)
        self.centralWidget.setAutoFillBackground(False)
        self.centralWidget.setObjectName("centralwidget")

        self.verticalLayout = QtWidgets.QVBoxLayout(self.centralWidget)
        self.verticalLayout.setObjectName("verticalLayout")

        # First Splitter
        self.splitter_6 = QtWidgets.QSplitter(parent=self.centralWidget)
        self.splitter_6.setOrientation(QtCore.Qt.Orientation.Horizontal)
        self.splitter_6.setObjectName("splitter_6")

        # Connect Button
        self.connectButton = QtWidgets.QPushButton(parent=self.splitter_6)
        self.connectButton.setObjectName("connectButton")
        self.connectButton.setEnabled(True)
        self.verticalLayout.addWidget(self.splitter_6)

        self.gridLayout_2 = QtWidgets.QGridLayout()
        self.gridLayout_2.setObjectName("gridLayout_2")

        # Z-axis Label
        self.label = QtWidgets.QLabel(parent=self.centralWidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label.sizePolicy().hasHeightForWidth())
        self.label.setSizePolicy(sizePolicy)
        self.label.setObjectName("label")
        self.gridLayout_2.addWidget(self.label, 0, 0, 1, 1)

        # Z-axis LineEdit
        self.zaxis = QtWidgets.QLineEdit(parent=self.centralWidget)
        self.zaxis.setEnabled(False)

        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Expanding,
                                           QtWidgets.QSizePolicy.Policy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.zaxis.sizePolicy().hasHeightForWidth())
        self.zaxis.setSizePolicy(sizePolicy)
        self.zaxis.setObjectName("zaxis")
        if self.piDevice is not None:
            self.zaxis.text = self.piDevice.qPOS(self.piDevice.axes)['1']
        # self.zaxis.textChanged.connect(self._zaxis_changed)

        self.gridLayout_2.addWidget(self.zaxis, 0, 1, 1, 1)

        # Z-axis Combobox
        self.comboBox = QtWidgets.QComboBox(parent=self.centralWidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.comboBox.sizePolicy().hasHeightForWidth())
        self.comboBox.setSizePolicy(sizePolicy)
        self.comboBox.setObjectName("comboBox")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.gridLayout_2.addWidget(self.comboBox, 0, 2, 1, 1)
        self.verticalLayout.addLayout(self.gridLayout_2)
        self.gridLayout = QtWidgets.QGridLayout()
        self.gridLayout.setObjectName("gridLayout")

        # Speed Label
        self.label_2 = QtWidgets.QLabel(parent=self.centralWidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.MinimumExpanding,
                                           QtWidgets.QSizePolicy.Policy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_2.sizePolicy().hasHeightForWidth())
        self.label_2.setSizePolicy(sizePolicy)
        self.label_2.setObjectName("label_2")
        self.gridLayout.addWidget(self.label_2, 0, 0, 1, 2)

        # Speed LineEdit
        self.speed = QtWidgets.QLineEdit(parent=self.centralWidget)
        self.speed.setEnabled(False)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.MinimumExpanding,
                                           QtWidgets.QSizePolicy.Policy.Minimum)
        sizePolicy.setHorizontalStretch(5)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.speed.sizePolicy().hasHeightForWidth())
        self.speed.setSizePolicy(sizePolicy)
        self.speed.setObjectName("speed")
        # self.speed.textChanged.connect(self._speed_changed)
        self.gridLayout.addWidget(self.speed, 0, 1, 1, 2)

        # Speed Combobox
        self.comboBox_2 = QtWidgets.QComboBox(parent=self.centralWidget)
        self.comboBox_2.setEnabled(True)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.comboBox_2.sizePolicy().hasHeightForWidth())
        self.comboBox_2.setSizePolicy(sizePolicy)
        self.comboBox_2.setAutoFillBackground(False)
        self.comboBox_2.setEditable(False)
        self.comboBox_2.setObjectName("comboBox_2")
        self.comboBox_2.addItem("")
        self.comboBox_2.addItem("")
        self.gridLayout.addWidget(self.comboBox_2, 0, 2, 1, 1)
        self.verticalLayout.addLayout(self.gridLayout)

        # Splitter
        self.splitter = QtWidgets.QSplitter(parent=self.centralWidget)
        self.splitter.setOrientation(QtCore.Qt.Orientation.Horizontal)
        self.splitter.setObjectName("splitter")

        # Step Size Label
        self.label_3 = QtWidgets.QLabel(parent=self.centralWidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_3.sizePolicy().hasHeightForWidth())
        self.label_3.setSizePolicy(sizePolicy)
        self.label_3.setObjectName("label_3")
        self.gridLayout.addWidget(self.label_3, 0, 3, 1, 1)

        # Step Size LineEdit
        self.stepSizeEdit = QtWidgets.QLineEdit(parent=self.centralWidget)
        self.stepSizeEdit.setEnabled(False)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.MinimumExpanding,
                                           QtWidgets.QSizePolicy.Policy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.speed.sizePolicy().hasHeightForWidth())
        self.stepSizeEdit.setSizePolicy(sizePolicy)
        self.stepSizeEdit.setObjectName("stepSizeEdit")
        self.gridLayout.addWidget(self.stepSizeEdit, 0, 4, 1, 1)

        # Min axis Value Label for Sweep
        self.label_6 = QtWidgets.QLabel(parent=self.centralWidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_6.sizePolicy().hasHeightForWidth())
        self.label_6.setSizePolicy(sizePolicy)
        self.label_6.setObjectName("label_6")
        self.gridLayout.addWidget(self.label_6, 1, 0, 1, 1)

        # Min axis LineEdit for Sweep
        self.minAxis = QtWidgets.QLineEdit(parent=self.centralWidget)
        self.minAxis.setEnabled(False)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Expanding,
                                           QtWidgets.QSizePolicy.Policy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.speed.sizePolicy().hasHeightForWidth())
        self.minAxis.setSizePolicy(sizePolicy)
        self.minAxis.setObjectName("minAxis")
        self.gridLayout.addWidget(self.minAxis, 1, 1, 1, 1)

        # Max axis value label for Sweep
        self.label_7 = QtWidgets.QLabel(parent=self.centralWidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_6.sizePolicy().hasHeightForWidth())
        self.label_7.setSizePolicy(sizePolicy)
        self.label_7.setObjectName("label_7")
        self.gridLayout.addWidget(self.label_7, 1, 2, 1, 1)

        # Max axis value LineEdit  for Sweep
        self.maxAxis = QtWidgets.QLineEdit(parent=self.centralWidget)
        self.maxAxis.setEnabled(False)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Expanding,
                                           QtWidgets.QSizePolicy.Policy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.speed.sizePolicy().hasHeightForWidth())
        self.maxAxis.setSizePolicy(sizePolicy)
        self.maxAxis.setObjectName("maxAxis")
        self.gridLayout.addWidget(self.maxAxis, 1, 3, 1, 1)

        # N Label
        self.label_4 = QtWidgets.QLabel(parent=self.centralWidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_4.sizePolicy().hasHeightForWidth())
        self.label_4.setSizePolicy(sizePolicy)
        self.label_4.setObjectName("label_4")
        self.gridLayout.addWidget(self.label_4, 1, 4, 1, 1)

        # N LineEdit
        self.nSweep = QtWidgets.QLineEdit(parent=self.centralWidget)
        self.nSweep.setEnabled(False)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Expanding,
                                           QtWidgets.QSizePolicy.Policy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.speed.sizePolicy().hasHeightForWidth())
        self.nSweep.setSizePolicy(sizePolicy)
        self.nSweep.setObjectName("speed")
        self.gridLayout.addWidget(self.nSweep, 1, 5, 1, 1)

        # Halt Time Label
        self.label_5 = QtWidgets.QLabel(parent=self.centralWidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_5.sizePolicy().hasHeightForWidth())
        self.label_5.setSizePolicy(sizePolicy)
        self.label_5.setObjectName("label_5")
        self.gridLayout.addWidget(self.label_5, 1, 6, 1, 1)

        # Halt time LineEdit
        self.haltTime = QtWidgets.QLineEdit(parent=self.centralWidget)
        self.haltTime.setEnabled(False)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Expanding,
                                           QtWidgets.QSizePolicy.Policy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.speed.sizePolicy().hasHeightForWidth())
        self.haltTime.setSizePolicy(sizePolicy)
        self.haltTime.setObjectName("haltTime")
        self.gridLayout.addWidget(self.haltTime, 1, 7, 1, 1)

        # Down Button
        self.up = QtWidgets.QPushButton(parent=self.splitter)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.up.sizePolicy().hasHeightForWidth())
        self.up.setSizePolicy(sizePolicy)
        self.up.setObjectName("up")
        self.up.setEnabled(False)
        self.up.clicked.connect(self._up)

        # Down Button
        self.down = QtWidgets.QPushButton(parent=self.splitter)
        self.down.clicked.connect(self._down)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.down.sizePolicy().hasHeightForWidth())
        self.down.setSizePolicy(sizePolicy)
        self.down.setObjectName("down")
        self.down.setEnabled(False)

        # Splitter 5
        self.verticalLayout.addWidget(self.splitter)
        self.splitter_5 = QtWidgets.QSplitter(parent=self.centralWidget)
        self.splitter_5.setOrientation(QtCore.Qt.Orientation.Horizontal)
        self.splitter_5.setObjectName("splitter_5")

        # Move Button
        self.move = QtWidgets.QPushButton(parent=self.splitter_5)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.move.sizePolicy().hasHeightForWidth())
        self.move.setSizePolicy(sizePolicy)
        self.move.setObjectName("move")
        self.move.setEnabled(False)
        self.move.clicked.connect(self._move)

        # Pause Button
        self.pause = QtWidgets.QPushButton(parent=self.splitter_5)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pause.sizePolicy().hasHeightForWidth())
        self.pause.setSizePolicy(sizePolicy)
        self.pause.setObjectName("pause")
        self.pause.setEnabled(False)
        self.pause.clicked.connect(self._pause)

        # Stop Button
        self.stop = QtWidgets.QPushButton(parent=self.splitter_5)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.stop.sizePolicy().hasHeightForWidth())
        self.stop.setSizePolicy(sizePolicy)
        self.stop.setObjectName("stop")
        self.stop.setEnabled(False)
        self.stop.clicked.connect(self._stop)

        # Splitter 3
        self.verticalLayout.addWidget(self.splitter_5)
        self.splitter_3 = QtWidgets.QSplitter(parent=self.centralWidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.splitter_3.sizePolicy().hasHeightForWidth())
        self.splitter_3.setSizePolicy(sizePolicy)
        self.splitter_3.setOrientation(QtCore.Qt.Orientation.Horizontal)
        self.splitter_3.setObjectName("splitter_3")

        # Save Position Button
        self.savePosition = QtWidgets.QPushButton(parent=self.splitter_3)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.savePosition.sizePolicy().hasHeightForWidth())
        self.savePosition.setSizePolicy(sizePolicy)
        self.savePosition.setObjectName("savePosition")
        self.savePosition.setEnabled(False)

        # Sweep Button
        self.Sweep = QtWidgets.QPushButton(parent=self.splitter_3)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.Sweep.sizePolicy().hasHeightForWidth())
        self.Sweep.setSizePolicy(sizePolicy)
        self.Sweep.setObjectName("Sweep")
        self.Sweep.setEnabled(False)
        self.Sweep.clicked.connect(self._sweep)

        # Go To Origin Button
        self.goToOrigin = QtWidgets.QPushButton(parent=self.splitter_3)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.goToOrigin.sizePolicy().hasHeightForWidth())
        self.goToOrigin.setSizePolicy(sizePolicy)
        self.goToOrigin.setObjectName("goToOrigin")
        self.goToOrigin.setEnabled(False)
        self.goToOrigin.clicked.connect(self._go_to_origin)

        self.verticalLayout.addWidget(self.splitter_3)
        MainWindow.setCentralWidget(self.centralWidget)

        # Menu Bar
        self.menuBar = QtWidgets.QMenuBar(parent=MainWindow)
        self.menuBar.setGeometry(QtCore.QRect(0, 0, 478, 22))
        self.menuBar.setObjectName("menuBar")
        self.menuMenu = QtWidgets.QMenu(parent=self.menuBar)
        self.menuMenu.setObjectName("menuMenu")
        MainWindow.setMenuBar(self.menuBar)

        # Status Bar
        self.statusBar = QtWidgets.QStatusBar(parent=MainWindow)
        self.statusBar.setObjectName("statusBar")
        MainWindow.setStatusBar(self.statusBar)
        self.actionExit = QtGui.QAction(parent=MainWindow)
        self.actionExit.setObjectName("actionExit")
        self.actionProperties = QtGui.QAction(parent=MainWindow)
        self.actionProperties.setObjectName("actionProperties")
        self.menuMenu.addAction(self.actionProperties)
        self.menuMenu.addAction(self.actionExit)
        self.menuBar.addAction(self.menuMenu.menuAction())

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Calibration  Unit"))

        # Connect Button
        self.connectButton.setText(_translate("MainWindow", "Connect"))
        self.connectButton.clicked.connect(self._connect)
        self.connectButton.setCheckable(True)

        self.label.setText(_translate("MainWindow", "Z-Axis"))
        self.zaxis.setText(_translate("MainWindow", "Enter z-axis value between 0 and 300"))

        self.comboBox.setItemText(0, _translate("MainWindow", "mm"))
        self.comboBox.setItemText(1, _translate("MainWindow", "cm"))

        self.speed.setText(_translate("MainWindow", "Enter a speed value between 0 and 6"))
        # self.speed.textChanged.connect(self._speed_changed)

        self.label_2.setText(_translate("MainWindow", "Speed"))

        self.comboBox_2.setItemText(0, _translate("MainWindow", "mm/sec"))
        self.comboBox_2.setItemText(1, _translate("MainWindow", "cm/sec"))

        self.label_3.setText(_translate("MainWindow", "Step Size"))
        self.stepSizeEdit.setText(_translate("MainWindow", "Enter step size value"))

        self.label_4.setText(_translate("MainWindow", "N Sweeps"))
        self.nSweep.setText(_translate("MainWindow", "Enter number of sweeps"))

        self.label_5.setText(_translate("MainWindow", "Halt Time"))
        self.haltTime.setText(_translate("MainWindow", "Enter halt time value"))

        self.label_6.setText(_translate("MainWindow", "Min-sweep"))
        self.minAxis.setText(_translate("MainWindow", "Enter minimum sweep value"))

        self.label_7.setText(_translate("MainWindow", "Max-sweep"))
        self.maxAxis.setText(_translate("MainWindow", "Enter maximum"))

        self.up.setText(_translate("MainWindow", "Up"))

        self.down.setText(_translate("MainWindow", "Down"))
        self.move.setText(_translate("MainWindow", "Move"))

        self.pause.setText(_translate("MainWindow", "Pause"))
        self.stop.setText(_translate("MainWindow", "Stop"))

        self.savePosition.setText(_translate("MainWindow", "Save Position"))
        self.Sweep.setText(_translate("MainWindow", "Sweep"))
        self.goToOrigin.setText(_translate("MainWindow", "Go to Origin"))

        self.menuMenu.setTitle(_translate("MainWindow", "Menu"))

        self.actionExit.setText(_translate("MainWindow", "Exit"))

        self.actionProperties.setText(_translate("MainWindow", "Properties"))

    @pyqtSlot()
    def _connect(self):
        if not self.connectButtonState:
            self.piDevice = GCSDevice('C-663')
            PILogger.info('Searching for controllers...')
            serial_number = self.piDevice.EnumerateUSB()
            self.piDevice.ConnectUSB(serial_number[0])
            PILogger.info('Connected: {}'.format(self.piDevice.qIDN().strip()))

            PILogger.info(self.piDevice.qIDN())

            PILogger.info('Initializing device...')
            pitools.startup(self.piDevice, stages=[STAGE_NUMBER], refmodes=['FNL'])
            PILogger.info('done!')
            self.connectButton.setChecked(self.connectButtonState)
            self.connectButton.setText('Connected')
            if self.piDevice.IsConnected():
                self.statusBar.showMessage('Connected!', 2000)
                self.connectButtonState = True

            # PI Device
            self.piDevice = self.piDevice

            # Set Initial Values
            self.zAxisPosition = self.__getPosition()
            self.speedValue = self.__getSpeed()
            self.stepSizeValue = self.__getStepSize()
            self.zaxis.setText(str(self.zAxisPosition))
            self.speed.setText(str(self.speedValue))
            self.stepSizeEdit.setText(str(self.stepSizeValue))

            # Loggers
            PILogger.info(f"Current Pos: {self.__getPosition()} mm")
            PILogger.info(f"Current Velocity {self.__getSpeed()} mm/sec")
            PILogger.info(f"Current Step Size {self.__getStepSize()} mm")

            # Enable Buttons and Line editing
            self.zaxis.setEnabled(True)
            self.speed.setEnabled(True)
            self.up.setEnabled(True)
            self.down.setEnabled(True)
            self.move.setEnabled(True)
            self.pause.setEnabled(True)
            self.stop.setEnabled(True)
            self.savePosition.setEnabled(True)
            self.Sweep.setEnabled(True)
            self.goToOrigin.setEnabled(True)
            self.nSweep.setEnabled(True)
            self.stepSizeEdit.setEnabled(True)
            self.haltTime.setEnabled(True)
            self.minAxis.setEnabled(True)
            self.maxAxis.setEnabled(True)

        else:

            # Deactivate Buttons and Line editing
            PILogger.info('Disconnecting...')
            self.piDevice.CloseConnection()
            self.connectButtonState = False
            self.connectButton.setText('Connect')
            PILogger.info('disconnected')
            self.statusBar.showMessage('Disconnected!', 2000)
            self.piDevice = None
            self.zaxis.setEnabled(False)
            self.speed.setEnabled(False)
            self.up.setEnabled(False)
            self.down.setEnabled(False)
            self.move.setEnabled(False)
            self.pause.setEnabled(False)
            self.stop.setEnabled(False)
            self.savePosition.setEnabled(False)
            self.Sweep.setEnabled(False)
            self.goToOrigin.setEnabled(False)
            self.nSweep.setEnabled(False)
            self.stepSize.setEnabled(False)
            self.haltTime.setEnabled(False)
            self.minAxis.setEnabled(False)
            self.maxAxis.setEnabled(False)

    @pyqtSlot()
    def _move(self):

        try:

            self.statusBar.showMessage('Moving to target...', 2000)
            self.zAxisPosition = float(self.zaxis.text())
            self.speedValue = float(self.speed.text())
            self.piDevice.VEL('1', self.speedValue)
            self.piDevice.MOV('1', self.zAxisPosition)
            # pitools.waitontarget(self.piDevice, '1',)
            print("Moving at  postion {}, at speed  {}".format(self.zAxisPosition, self.speedValue))
            PILogger.info('Moved to {}'.format(self.piDevice.qPOS('1')['1']))
            self.zAxisPosition = self.__getPosition()

        except Exception as e:
            return e

    def _getRange(self):
        try:
            range_min = self.piDevice.qTMN()
            for key, value in range_min.items():
                PILogger.info('{}: {}'.format(key, value))
            range_max = self.piDevice.qTMX()
            for key, value in range_max.items():
                PILogger.info('{}: {}'.format(key, value))
        except Exception as e:
            PILogger.info('Error: {}'.format(e))

    def _pause(self):
        pauseposition = self.piDevice.qPOS('1')['1']
        self.piDevice.VEL('1', self.speedValue)
        self.piDevice.MOV('1', pauseposition)
        self.piDevice.VEL('1', 0)
        self.zAxisPosition = self.__getPosition()
        self.statusBar.showMessage('Paused!', 2000)
        PILogger.info('Paused')

    @pyqtSlot()
    def _stop(self):

        self.piDevice.ConnectUSB(self.devices[0])
        self.piDevice.VEL('1', 0)
        self.piDevice.MOV('1', 0)
        self.statusBar.showMessage('Stopped!', 2000)
        self.zAxisPosition = self.__getPosition()
        PILogger.info('Stopped')

    @pyqtSlot()
    def _down(self):

        if self.speedValue is None:
            self.speedValue = self.__getSpeed()
            self.speed.setText(str(self.speedValue))
        else:
            self.speedValue = float(self.speed.text())
        if self.stepSizeValue is None:
            self.stepSizeValue = self.__getStepSize
            self.stepSizeEdit.setText(str(self.stepSizeValue))
        else:
            self.stepSizeValue = float(self.stepSizeEdit.text())
        self.zAxisPosition = self.__getPosition()
        PILogger.info("Current Position:{}".format(self.zAxisPosition))
        self.statusBar.showMessage('Moving...', 2000)
        self.piDevice.VEL('1', self.speedValue)
        self.piDevice.MOV('1', self.zAxisPosition + self.stepSizeValue)
        pitools.waitontarget(self.piDevice, '1')
        self.statusBar.showMessage('Moved to position: {}'.format(self.__getPosition(), timeout=3000))
        PILogger.info('Moved to position: {}'.format(self.__getPosition()))
        self.zAxisPosition = self.__getPosition()
        self.zaxis.setText(str(self.zAxisPosition))

    def _up(self):

        self.zAxisPosition = self.__getPosition()
        self.speedValue = float(self.speed.text())
        self.stepSizeValue = float(self.stepSizeEdit.text())
        self.statusBar.showMessage('Moving...', 2000)

        # Move a single step downwards
        self.piDevice.VEL('1', self.speedValue)
        self.piDevice.MOV('1', self.zAxisPosition - self.stepSizeValue)
        pitools.waitontarget(self.piDevice, '1')
        self.statusBar.showMessage('Moved to position: {}'.format(self.__getPosition(), timeout=3000))
        PILogger.info('Moved to position: {}'.format(self.__getPosition()))
        self.zAxisPosition = self.__getPosition()
        self.zaxis.setText(str(self.zAxisPosition))

    @pyqtSlot()
    def _savePosition(self):
        pass

    @pyqtSlot()
    def _sweep(self):
        self.__setSpeed()
        if self.minAxis.text() is None or self.maxAxis.text() is None or self.haltTime.text() is None:
            return self.statusBar.showMessage('Please enter min, max and halt time', 4000)

        else:
            self.minValue = float(self.minAxis.text())
            self.maxValue = float(self.maxAxis.text())
            self.haltTimeValue = float(self.haltTime.text())
            self.posReadingDict = {'N': [], 'MinPositionReading': [], 'MaxPositionReading': []}

            self.statusBar.showMessage('Sweeping...', 2000)
            for i in range(int(self.nSweep.text())):
                sleep(0.5)

                self.posReadingDict['N'].append(i + 1)
                # Start moving to the minimum position
                PILogger.info('Starting {} sweep: {}'.format(i + 1, self.minValue, timeout=3))
                self.statusBar.showMessage('Moving to minimum position: {}'.format(self.minValue, timeout=3000))
                self.piDevice.MOV('1', self.minValue)
                pitools.waitontarget(self.piDevice, '1', postdelay=self.haltTimeValue)
                PILogger.info('Moved to min position: {}'.format(self.__getPosition()))
                sleep(0.5)
                PILogger.info("Writing minimum position readings")
                self.posReadingDict['MinPositionReading'].append(self.piDevice.qPOS('1')['1'])
                sleep(0.5)
                # Document minimum position readings

                # Start moving to the maximum position
                PILogger.info("Moving to maximum position: {}".format(self.maxValue))
                self.piDevice.MOV('1', self.maxValue)
                pitools.waitontarget(self.piDevice, '1', postdelay=self.haltTimeValue)
                PILogger.info('Moved to max position: {}'.format(self.maxValue))

                # Document maximum position readings
                PILogger.info("Getting maximum position readings")
                sleep(0.5)
                self.posReadingDict['MaxPositionReading'].append(self.piDevice.qPOS('1')['1'])
                sleep(0.5)

            self.df = pd.DataFrame.from_dict(self.posReadingDict)
            self.df.to_csv("posReadings50.csv", index=False)

    @pyqtSlot()
    def _go_to_origin(self):
        self.statusBar.showMessage("Moving to origin...", 2000)
        self.speedValue = float(self.speed.text())
        self.piDevice.VEL('1', self.speedValue)

        while self.__getPosition() != 0.0:
            self.piDevice.MOV('1', 0.0)
            self.zAxisPosition = self.__getPosition()
            self.zaxis.setText(str(self.zAxisPosition))

    # Getters and Setters
    def __setStepSize(self):
        self.stepSizeValue = STEP_SIZE

    def __moveToPosition(self):
        return self.piDevice.MOV('1', self.zAxisPosition)

    def __setSpeed(self):
        self.speedValue = float(self.speed.text())
        return self.piDevice.VEL('1', self.speedValue)

    def __getSpeed(self) -> float:
        return self.piDevice.qVEL('1')['1']

    def __getPosition(self) -> float:
        return self.piDevice.qPOS('1')['1']

    def __getStepSize(self):
        if self.stepSizeValue is None:
            self.stepSizeValue = STEP_SIZE
            return self.stepSizeValue
        else:
            return self.stepSizeValue

    def _rangeMin(self):
        pass

    def _zaxis_changed(self):
        # v = QDoubleValidator(0, 300, self.zaxis)
        # self.zaxis.setValidator(v)
        # if not v.validate(self.zaxis.text(), v.top()):
        #     self.statusBar.showMessage('Z-Axis value must be between 0 and 300')
        #     return
        # else:
        self.statusBar.showMessage('Z-Axis value must be between 0 and 300')
        self.zAxisPosition = float(self.zaxis.text())

    def _speed_changed(self):
        # speedValidator = QDoubleValidator(0, 6, self.speed)
        # self.speed.setValidator(speedValidator)
        # if not speedValidator.validate(self.speed.text(), speedValidator.top()):
        #     self.statusBar.showMessage('Speed value must be between 0 and 6')
        # else:
        self.speedValue = float(self.speed.text())
        self.piDevice.VEL('1', self.speedValue)


if __name__ == "__main__":
    import sys

    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec())
