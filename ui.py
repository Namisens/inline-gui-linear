# Form implementation generated from reading ui file 'mainwindow.ui'
#
# Created by: PyQt6 UI code generator 6.6.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.
# import time

from typing import Union
from PyQt6.QtCore import pyqtSlot
from PyQt6.QtWidgets import QMainWindow
from PySide6 import QtCore, QtGui, QtWidgets
from PySide6.QtGui import QDoubleValidator
from pipython import GCSDevice, pitools, PILogger, INFO

PILogger.setLevel(INFO)

STEP_SIZE = 10
CONTROLLER_NUMBER = 'C-663'
STAGE_NUMBER = 'M-414.32S'
DEFAULT_SPEED = 3.0
DEFAULT_ZAXIS_POSITION = 150


class Ui_MainWindow(QMainWindow):
    def __init__(self):
        super().__init__()

        self.connectButtonState: bool = False
        self.piDevice: GCSDevice = None
        self.stepSize: Union[int, None] = STEP_SIZE
        self.zAxisPosition: Union[float, None] = None
        self.speedValue: Union[float, None] = DEFAULT_SPEED

    def setupUi(self, MainWindow):

        # Mainwindow
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(478, 272)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(MainWindow.sizePolicy().hasHeightForWidth())
        MainWindow.setSizePolicy(sizePolicy)
        MainWindow.setMouseTracking(False)
        MainWindow.setAutoFillBackground(False)
        MainWindow.setTabShape(QtWidgets.QTabWidget.TabShape.Rounded)
        MainWindow.setDockNestingEnabled(False)
        MainWindow.setUnifiedTitleAndToolBarOnMac(False)

        self.centralWidget = QtWidgets.QWidget(parent=MainWindow)
        self.centralWidget.setEnabled(True)

        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(5)
        sizePolicy.setVerticalStretch(5)
        sizePolicy.setHeightForWidth(self.centralWidget.sizePolicy().hasHeightForWidth())

        self.centralWidget.setSizePolicy(sizePolicy)
        self.centralWidget.setAutoFillBackground(False)
        self.centralWidget.setObjectName("centralwidget")

        self.verticalLayout = QtWidgets.QVBoxLayout(self.centralWidget)
        self.verticalLayout.setObjectName("verticalLayout")

        # First Splitter
        self.splitter_6 = QtWidgets.QSplitter(parent=self.centralWidget)
        self.splitter_6.setOrientation(QtCore.Qt.Orientation.Horizontal)
        self.splitter_6.setObjectName("splitter_6")

        # Connect Button
        self.connectButton = QtWidgets.QPushButton(parent=self.splitter_6)
        self.connectButton.setObjectName("connectButton")
        self.connectButton.setEnabled(True)
        self.verticalLayout.addWidget(self.splitter_6)

        self.gridLayout_2 = QtWidgets.QGridLayout()
        self.gridLayout_2.setObjectName("gridLayout_2")

        # Z-axis Label
        self.label = QtWidgets.QLabel(parent=self.centralWidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label.sizePolicy().hasHeightForWidth())
        self.label.setSizePolicy(sizePolicy)
        self.label.setObjectName("label")
        self.gridLayout_2.addWidget(self.label, 0, 0, 1, 1)

        # Z-axis LineEdit
        self.zaxis = QtWidgets.QLineEdit(parent=self.centralWidget)
        self.zaxis.setEnabled(False)

        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Expanding,
                                           QtWidgets.QSizePolicy.Policy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.zaxis.sizePolicy().hasHeightForWidth())
        self.zaxis.setSizePolicy(sizePolicy)
        self.zaxis.setObjectName("zaxis")
        if self.piDevice is not None:
            self.zaxis.text = self.piDevice.qPOS(self.piDevice.axes)['1']
        # self.zaxis.textChanged.connect(self._zaxis_changed)

        self.gridLayout_2.addWidget(self.zaxis, 0, 1, 1, 1)

        # Z-axis Combobox
        self.comboBox = QtWidgets.QComboBox(parent=self.centralWidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.comboBox.sizePolicy().hasHeightForWidth())
        self.comboBox.setSizePolicy(sizePolicy)
        self.comboBox.setObjectName("comboBox")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.gridLayout_2.addWidget(self.comboBox, 0, 2, 1, 1)
        self.verticalLayout.addLayout(self.gridLayout_2)
        self.gridLayout = QtWidgets.QGridLayout()
        self.gridLayout.setObjectName("gridLayout")

        # Speed Label
        self.label_2 = QtWidgets.QLabel(parent=self.centralWidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_2.sizePolicy().hasHeightForWidth())
        self.label_2.setSizePolicy(sizePolicy)
        self.label_2.setObjectName("label_2")
        self.gridLayout.addWidget(self.label_2, 0, 0, 1, 1)

        # Speed LineEdit
        self.speed = QtWidgets.QLineEdit(parent=self.centralWidget)
        self.speed.setEnabled(False)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Expanding,
                                           QtWidgets.QSizePolicy.Policy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.speed.sizePolicy().hasHeightForWidth())
        self.speed.setSizePolicy(sizePolicy)
        self.speed.setObjectName("speed")
        # self.speed.textChanged.connect(self._speed_changed)
        self.gridLayout.addWidget(self.speed, 0, 1, 1, 1)

        # Speed Combobox
        self.comboBox_2 = QtWidgets.QComboBox(parent=self.centralWidget)
        self.comboBox_2.setEnabled(True)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.comboBox_2.sizePolicy().hasHeightForWidth())
        self.comboBox_2.setSizePolicy(sizePolicy)
        self.comboBox_2.setAutoFillBackground(False)
        self.comboBox_2.setEditable(False)
        self.comboBox_2.setObjectName("comboBox_2")
        self.comboBox_2.addItem("")
        self.comboBox_2.addItem("")
        self.gridLayout.addWidget(self.comboBox_2, 0, 2, 1, 1)
        self.verticalLayout.addLayout(self.gridLayout)
        self.splitter = QtWidgets.QSplitter(parent=self.centralWidget)
        self.splitter.setOrientation(QtCore.Qt.Orientation.Horizontal)
        self.splitter.setObjectName("splitter")

        # Up Button
        self.up = QtWidgets.QPushButton(parent=self.splitter)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.up.sizePolicy().hasHeightForWidth())
        self.up.setSizePolicy(sizePolicy)
        self.up.setObjectName("up")
        self.up.setEnabled(False)
        self.up.clicked.connect(self._up)

        # Down Button
        self.down = QtWidgets.QPushButton(parent=self.splitter)
        self.down.clicked.connect(self._down)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.down.sizePolicy().hasHeightForWidth())
        self.down.setSizePolicy(sizePolicy)
        self.down.setObjectName("down")
        self.down.setEnabled(False)

        # Splitter 5
        self.verticalLayout.addWidget(self.splitter)
        self.splitter_5 = QtWidgets.QSplitter(parent=self.centralWidget)
        self.splitter_5.setOrientation(QtCore.Qt.Orientation.Horizontal)
        self.splitter_5.setObjectName("splitter_5")

        # Move Button
        self.move = QtWidgets.QPushButton(parent=self.splitter_5)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.move.sizePolicy().hasHeightForWidth())
        self.move.setSizePolicy(sizePolicy)
        self.move.setObjectName("move")
        self.move.setEnabled(False)
        self.move.clicked.connect(self._move)

        # Pause Button
        self.pause = QtWidgets.QPushButton(parent=self.splitter_5)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pause.sizePolicy().hasHeightForWidth())
        self.pause.setSizePolicy(sizePolicy)
        self.pause.setObjectName("pause")
        self.pause.setEnabled(False)

        # Stop Button
        self.stop = QtWidgets.QPushButton(parent=self.splitter_5)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.stop.sizePolicy().hasHeightForWidth())
        self.stop.setSizePolicy(sizePolicy)
        self.stop.setObjectName("stop")
        self.stop.setEnabled(False)

        # Splitter 3
        self.verticalLayout.addWidget(self.splitter_5)
        self.splitter_3 = QtWidgets.QSplitter(parent=self.centralWidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.splitter_3.sizePolicy().hasHeightForWidth())
        self.splitter_3.setSizePolicy(sizePolicy)
        self.splitter_3.setOrientation(QtCore.Qt.Orientation.Horizontal)
        self.splitter_3.setObjectName("splitter_3")

        # Save Position Button
        self.savePosition = QtWidgets.QPushButton(parent=self.splitter_3)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.savePosition.sizePolicy().hasHeightForWidth())
        self.savePosition.setSizePolicy(sizePolicy)
        self.savePosition.setObjectName("savePosition")
        self.savePosition.setEnabled(False)

        # Previous Position Button
        self.goPreviousPosition = QtWidgets.QPushButton(parent=self.splitter_3)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.goPreviousPosition.sizePolicy().hasHeightForWidth())
        self.goPreviousPosition.setSizePolicy(sizePolicy)
        self.goPreviousPosition.setObjectName("goPreviousPosition")
        self.goPreviousPosition.setEnabled(False)

        # Go To Origin Button
        self.goToOrigin = QtWidgets.QPushButton(parent=self.splitter_3)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.goToOrigin.sizePolicy().hasHeightForWidth())
        self.goToOrigin.setSizePolicy(sizePolicy)
        self.goToOrigin.setObjectName("goToOrigin")
        self.goToOrigin.setEnabled(False)
        self.goToOrigin.clicked.connect(self._go_to_origin)

        self.verticalLayout.addWidget(self.splitter_3)
        MainWindow.setCentralWidget(self.centralWidget)

        # Menu Bar
        self.menuBar = QtWidgets.QMenuBar(parent=MainWindow)
        self.menuBar.setGeometry(QtCore.QRect(0, 0, 478, 22))
        self.menuBar.setObjectName("menuBar")
        self.menuMenu = QtWidgets.QMenu(parent=self.menuBar)
        self.menuMenu.setObjectName("menuMenu")
        MainWindow.setMenuBar(self.menuBar)

        # Status Bar
        self.statusBar = QtWidgets.QStatusBar(parent=MainWindow)
        self.statusBar.setObjectName("statusBar")
        MainWindow.setStatusBar(self.statusBar)
        self.actionExit = QtGui.QAction(parent=MainWindow)
        self.actionExit.setObjectName("actionExit")
        self.actionProperties = QtGui.QAction(parent=MainWindow)
        self.actionProperties.setObjectName("actionProperties")
        self.menuMenu.addAction(self.actionProperties)
        self.menuMenu.addAction(self.actionExit)
        self.menuBar.addAction(self.menuMenu.menuAction())

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Calibration  Unit"))

        # Connect Button
        self.connectButton.setText(_translate("MainWindow", "Connect"))
        self.connectButton.clicked.connect(self._connect)
        self.connectButton.setCheckable(True)

        self.label.setText(_translate("MainWindow", "Z-Axis"))
        self.zaxis.setText(_translate("MainWindow", "Enter z-axis value between 0 and 300"))

        self.comboBox.setItemText(0, _translate("MainWindow", "mm"))
        self.comboBox.setItemText(1, _translate("MainWindow", "cm"))

        self.speed.setText(_translate("MainWindow", "Enter a speed value between 0 and 6"))
        # self.speed.textChanged.connect(self._speed_changed)

        self.label_2.setText(_translate("MainWindow", "Speed"))

        self.comboBox_2.setItemText(0, _translate("MainWindow", "mm/sec"))
        self.comboBox_2.setItemText(1, _translate("MainWindow", "cm/sec"))

        self.up.setText(_translate("MainWindow", "Up"))

        self.down.setText(_translate("MainWindow", "Down"))
        self.move.setText(_translate("MainWindow", "Move"))

        self.pause.setText(_translate("MainWindow", "Pause"))
        self.stop.setText(_translate("MainWindow", "Stop"))
        self.stop.clicked.connect(self._stop)
        self.savePosition.setText(_translate("MainWindow", "Save Position"))
        self.goPreviousPosition.setText(_translate("MainWindow", "Go to Previous Position"))
        self.goToOrigin.setText(_translate("MainWindow", "Go to Origin"))

        self.menuMenu.setTitle(_translate("MainWindow", "Menu"))

        self.actionExit.setText(_translate("MainWindow", "Exit"))

        self.actionProperties.setText(_translate("MainWindow", "Properties"))

    @pyqtSlot()
    def _connect(self):
        if not self.connectButtonState:
            self.piDevice = GCSDevice('C-663')
            PILogger.info('Searching for controllers...')
            serial_number = self.piDevice.EnumerateUSB()
            self.piDevice.ConnectUSB(serial_number[0])
            PILogger.info('Connected: {}'.format(self.piDevice.qIDN().strip()))

            PILogger.info(self.piDevice.qIDN())

            PILogger.info('Initializing device...')
            pitools.startup(self.piDevice, stages=[STAGE_NUMBER], refmodes=['FNL'])
            PILogger.info('done!')
            self.connectButton.setChecked(self.connectButtonState)
            self.connectButton.setText('Connected')
            if self.piDevice.IsConnected():
                self.statusBar.showMessage('Connected!', 2000)
                self.connectButtonState = True

            PILogger.info(f"Current Pos: {self.piDevice.qPOS('1')['1']} mm")
            self.piDevice = self.piDevice
            self.zAxisPosition = self.piDevice.qPOS('1')['1']
            self.speedValue = self.piDevice.qVEL('1')['1']
            self.zaxis.setText(str(self.zAxisPosition))
            self.speed.setText(str(self.speedValue))
            self.zaxis.setEnabled(True)
            self.speed.setEnabled(True)
            self.up.setEnabled(True)
            self.down.setEnabled(True)
            self.move.setEnabled(True)
            self.pause.setEnabled(True)
            self.stop.setEnabled(True)
            self.savePosition.setEnabled(True)
            self.goPreviousPosition.setEnabled(True)
            self.goToOrigin.setEnabled(True)

        else:

            PILogger.info('Disconnecting...')
            self.piDevice.CloseConnection()
            self.connectButtonState = False
            self.connectButton.setText('Connect')
            PILogger.info('disconnected')
            self.statusBar.showMessage('Disconnected!', 2000)
            self.piDevice = None
            self.zaxis.setEnabled(False)
            self.speed.setEnabled(False)
            self.up.setEnabled(False)
            self.down.setEnabled(False)
            self.move.setEnabled(False)
            self.pause.setEnabled(False)
            self.stop.setEnabled(False)
            self.savePosition.setEnabled(False)
            self.goPreviousPosition.setEnabled(False)
            self.goToOrigin.setEnabled(False)

    @pyqtSlot()
    def _move(self):
        if not self.connectButtonState:
            self.statusBar.showMessage('The device is not connected. Please connect first!')

        # if self.speedValue is None or self.zAxisPosition is None:
        #     self.statusBar.showMessage('Please set the target speed and target position')

        else:
            try:

                self.statusBar.showMessage('Moving to target...', 2000)
                self.zAxisPosition = float(self.zaxis.text())
                self.speedValue = float(self.speed.text())
                self.piDevice.VEL('1', self.speedValue)
                self.piDevice.MOV('1', self.zAxisPosition)
                # pitools.waitontarget(self.piDevice, '1')
                print("Moving at  postion {}, at speed  {}".format(self.zAxisPosition, self.speedValue))
                PILogger.info('Moved to {}'.format(self.piDevice.qPOS('1')['1']))
                self.zAxisPosition = self.piDevice.qPOS('1')['1']

            except Exception as e:
                return e

    def _getRange(self):

        try:
            range_min = self.piDevice.qTMN()
            for key, value in range_min.items():
                PILogger.info('{}: {}'.format(key, value))
            range_max = self.piDevice.qTMX()
            for key, value in range_max.items():
                PILogger.info('{}: {}'.format(key, value))
        except Exception as e:
            PILogger.info('Error: {}'.format(e))

    def _pause(self):

        pass

    @pyqtSlot()
    def _stop(self):
        if not self.connectButtonState:
            self.statusBar.showMessage('The device is not connected.')
        else:
            self.piDevice.ConnectUSB(self.devices[0])
            self.piDevice.VEL('1', 0)
            self.piDevice.MOV('1', 0)
            self.statusBar.showMessage('Stopped!', 2000)
            PILogger.info('Stopped')

    @pyqtSlot()
    def _up(self):
        if not self.connectButtonState:
            self.statusBar.showMessage('The device is not connected. Please connect first!')
            return
        else:
            # PILogger.info(self.piDevice.IsConnected())
            self.zAxisPosition = self.__getPosition()
            self.speedValue = float(self.speed.text())

            PILogger.info("Current Position:{}".format(self.zAxisPosition))
            self.statusBar.showMessage('Moving...', 2000)
            self.piDevice.VEL('1', self.speedValue)
            self.piDevice.MOV('1', self.zAxisPosition + STEP_SIZE)
            pitools.waitontarget(self.piDevice, '1')
            self.statusBar.showMessage('Moved to position: {}'.format(self.piDevice.qPOS('1')['1'], timeout=3000))
            PILogger.info('Moved to position: {}'.format(self.piDevice.qPOS('1')['1']))
            self.zAxisPosition = self.__getPosition()
            self.zaxis.setText(str(self.zAxisPosition))

    def _down(self):
        if not self.connectButtonState:
            self.statusBar.showMessage('The device is not connected. Please connect first!')
        else:

            self.zAxisPosition = self.__getPosition()
            self.speedValue = float(self.speed.text())
            self.statusBar.showMessage('Moving...', 2000)

            # Move a single step downwards
            self.piDevice.VEL('1', self.speedValue)
            self.piDevice.MOV('1', self.zAxisPosition - STEP_SIZE)
            pitools.waitontarget(self.piDevice, '1')
            self.statusBar.showMessage('Moved to position: {}'.format(self.piDevice.qPOS('1')['1'], timeout=3000))
            PILogger.info('Moved to position: {}'.format(self.piDevice.qPOS('1')['1']))
            self.zAxisPosition = self.piDevice.qPOS('1')['1']
            self.zaxis.setText(str(self.zAxisPosition))

    @pyqtSlot()
    def _savePosition(self):
        pass

    @pyqtSlot()
    def _goPreviousPosition(self):
        pass

    @pyqtSlot()
    def _go_to_origin(self):

        self.statusBar.showMessage("Moving to origin...", 2000)
        self.speedValue = float(self.speed.text())
        self.piDevice.VEL('1', self.speedValue)

        while self.__getPosition() != 0.0:
            self.piDevice.MOV('1', 0.0)
            self.zAxisPosition = self.__getPosition()
            self.zaxis.setText(str(self.zAxisPosition))

    def __getSpeed(self) -> float:
        return self.piDevice.qVEL('1')['1']

    def __getPosition(self) -> float:
        return self.piDevice.qPOS('1')['1']

    def _rangeMin(self):
        pass

    def _zaxis_changed(self):
        # v = QDoubleValidator(0, 300, self.zaxis)
        # self.zaxis.setValidator(v)
        # if not v.validate(self.zaxis.text(), v.top()):
        #     self.statusBar.showMessage('Z-Axis value must be between 0 and 300')
        #     return
        # else:
        self.statusBar.showMessage('Z-Axis value must be between 0 and 300')
        self.zAxisPosition = float(self.zaxis.text())

    def _speed_changed(self):
        # speedValidator = QDoubleValidator(0, 6, self.speed)
        # self.speed.setValidator(speedValidator)
        # if not speedValidator.validate(self.speed.text(), speedValidator.top()):
        #     self.statusBar.showMessage('Speed value must be between 0 and 6')
        # else:
        self.speedValue = float(self.speed.text())
        self.piDevice.VEL('1', self.speedValue)


if __name__ == "__main__":
    import sys

    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec())
